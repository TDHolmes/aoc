//! --- Day 5: Binary Boarding ---
//!
//! You board your plane only to discover a new problem: you dropped your boarding pass!
//! You aren't sure which seat is yours, and all of the flight attendants are busy with
//! the flood of people that suddenly made it through passport control.
//!
//! You write a quick program to use your phone's camera to scan all of the nearby boarding
//! passes (your puzzle input); perhaps you can find your seat through process of elimination.
//!
//! Instead of zones or groups, this airline uses binary space partitioning to seat people.
//! A seat might be specified like FBFBBFFRLR, where F means "front", B means "back",
//! L means "left", and R means "right".
//!
//! The first 7 characters will either be F or B; these specify exactly one of the 128 rows
//! on the plane (numbered 0 through 127). Each letter tells you which half of a region the
//! given seat is in. Start with the whole list of rows; the first letter indicates whether
//! the seat is in the front (0 through 63) or the back (64 through 127). The next letter
//! indicates which half of that region the seat is in, and so on until you're left with exactly
//! one row.
//!
//! For example, consider just the first seven characters of FBFBBFFRLR:
//!
//! Start by considering the whole range, rows 0 through 127.
//! F means to take the lower half, keeping rows 0 through 63.
//! B means to take the upper half, keeping rows 32 through 63.
//! F means to take the lower half, keeping rows 32 through 47.
//! B means to take the upper half, keeping rows 40 through 47.
//! B keeps rows 44 through 47.
//! F keeps rows 44 through 45.
//! The final F keeps the lower of the two, row 44.
//! The last three characters will be either L or R; these specify exactly one of the 8 columns
//! of seats on the plane (numbered 0 through 7). The same process as above proceeds again, this
//! time with only three steps. L means to keep the lower half, while R means to keep the upper half.
//!
//! For example, consider just the last 3 characters of FBFBBFFRLR:
//!
//! Start by considering the whole range, columns 0 through 7.
//! R means to take the upper half, keeping columns 4 through 7.
//! L means to take the lower half, keeping columns 4 through 5.
//! The final R keeps the upper of the two, column 5.
//! So, decoding FBFBBFFRLR reveals that it is the seat at row 44, column 5.
//!
//! Every seat also has a unique seat ID: multiply the row by 8, then add the column. In this
//! example, the seat has ID 44 * 8 + 5 = 357.
//!
//! Here are some other boarding passes:
//!
//! BFFFBBFRRR: row 70, column 7, seat ID 567.
//! FFFBBBFRRR: row 14, column 7, seat ID 119.
//! BBFFBBFRLL: row 102, column 4, seat ID 820.
//!
//! As a sanity check, look through your list of boarding passes. What is the highest seat
//! ID on a boarding pass?


pub fn parse_binary_space_partiioning(entry: &str) -> i32 {
    let regex = regex::Regex::new(r"^([BF]{7})([RL]{3})$").unwrap();
    if !regex.is_match(entry) {
        return -1;
    }
    let regex_match = regex.captures(entry).unwrap();
    let row_directions = &regex_match[1];
    let col_directions = &regex_match[2];

    let mut row = 0;
    let mut column = 0;
    let mut increment = 64;

    for row_direction in row_directions.chars() {
        if row_direction == 'B' {
            row += increment;
        }
        increment /= 2;
    }

    increment = 4;
    for col_direction in col_directions.chars() {
        if col_direction == 'R' {
            column += increment;
        }
        increment /= 2;
    }

    println!("{} -> r:{} c:{}", entry, row, column);

    row * 8 + column
}


pub fn part_one(_data: &str) -> i32 {
    0
}

pub fn part_two(_data: &str) -> i32 {
    0
}

#[cfg(test)]
mod test {
    use std::cmp::max;

    use super::*;

    const EXAMPLE_DATA: [&str; 3] = [
        "BFFFBBFRRR",
        "FFFBBBFRRR",
        "BBFFBBFRLL",
    ];

    const MY_DATA: &str = "FBBFBBBRLR
BFFBBFFLLL
BFFBBBBRRR
BBBFBBFRLL
FFBFFFFLRL
FFBFBBBLLL
BFFBBFBLLL
FBFFFFBLLL
FBBBBBBRLL
BBFFBBFLLR
FFBFBBBLRL
FFBBBBFLLL
FBBFFBBRLL
BFBFFFFRLR
BFBBFBBLLL
FBFFBBBRRR
BBFBFBFLRR
FFBBFFFRRR
BBFFBBFLRL
FBFBBBBLRR
BFFFBFBLRL
FBFFBFFLLR
FFFBFBBRLR
BFFBBBFRLR
BFFBFFFLLR
FFBBBFFLLL
BBBFBBFRRL
BBFBFBFRLR
BFBFFBBRRL
BFFFFFFRLR
FBFBFBBLLL
BFFFBBFRLR
FBFBBBBRRR
BFBFBFBRLR
BBBFFBBLRL
FBFFBFBRLR
FBBBBBFLLR
FFBBBFBRRL
BFFBBFBRLL
BBFFBFFLLL
BFBFBBBLRL
FFBBBFBRRR
FFBBBBBRLL
BFBFBBFLRR
FFBFFBBLRR
BBBFBFFLRL
BBFBBBFLLL
BFBBFFFRLL
FBFBFBFRRR
BBFFBFFLRR
FBFBFBBRRL
BBFFBFFRLR
BBFFFFBRRL
FBFBBBFRLL
BFFFBBFRRR
BFBFBFFLLL
BBFBBFFRRR
FFBBFFBLRR
BFBBFBBRLR
FFFBFBBLLR
FBBFBBFLLR
BBBFBFBRRL
BFBBBFFRLR
BBBFBFBRLL
BBFBBBFLLR
BBFFBFFRRL
FFBFBBBLLR
FFBFBBFLRR
FBBFFBFRLL
BBBFFFBLLL
BBFBFBBLLL
BFFBFBBLRL
BBFFBFBRRR
FFFBFBBRRR
FBFBFFFRRR
FFFBBBBRRR
BFFBBFFRRL
FFBBBFBLRL
BFBBFBFLRL
FFFBBFFLLL
FBBBBFBLLR
FBBBFFBLRL
FBFBFFBLRR
FFBFBFFLLR
BFFFFFFLRL
BFFFBBBLRR
BBBFBFFLLL
BFFFBBFRLL
FBFFFFFRRR
BBFFBBFRLR
FBBFFFFRLL
FBBFBFFLLR
FBBFFFFRLR
BBFFBBBRLL
BFFBFFFRLR
FFBBFBBLLL
BFBFBFBRRL
BFFFBBFLRL
FFBBFFBLRL
FBFFFFFRLR
BFFBBBBRLL
BBFBBBFRLL
BBBFFBFRRR
FBBBBBFLRL
FFBFBBFRRR
BFFFFFBLRL
FBFBFFFRLL
BFFFBBBRLR
BFFFBBBRRR
FFBBBBBRLR
BFFFBBFLLR
BFBBBFBLRR
BBFFFFFLRR
FBBFFBFRRL
FFBBBBBLLL
FBBBBFBLRL
BFBFFBBRLR
BFFFFBBRRL
BBFBBBBRRL
BFFFFBFLRL
BBFFFBBLLR
FBFFFFBRLL
FBBBFBBRRL
FFBFBBBRLR
BFFFBFBRLR
BFBFFBFLLR
BBFBFFFRRL
FBBBFBFRRL
BFBFBBFRLL
FBBBFFFLLL
BBFBBFFRLL
BFBBBBFRRL
BBFFFBFLRR
BFFBFFBLRL
FBBBFFBRRL
BBBFFFBRLR
BFBBFBBRRL
FFBBFBBRRL
FBBFBBFRRL
BBFBFFBRRR
BFBBFFFLLL
BFFBBBFLLR
FBBBBFBRRL
BBFBFBFLLL
BFBFBBFLLR
BBFFFBBRLR
BBFFFBBRRR
FFBFFBBRLR
FFBFFBFRRL
BBFFBBBLRR
FBBBFFBLRR
FBBBFBFRLR
FBFBBFBLRR
BFFBBFFLLR
BBFBBFBRLL
FFBFFBBLLL
FBFBBBBRLR
FBFFFFFLRL
BFFBFFFLRL
BBFFFFFRLR
FBBBBBBLLL
BFFBBFFLRL
FFFBBBBLLR
FFFBBFBRRL
BFFBBBFLRR
FBBFFFFLRR
FBBFBBBLLL
FFFBFBFRLR
FFBBBBFRRL
BFBFFBBRLL
FFBBFBFLLL
BBFFFFBRRR
BFFFBFFLLR
FFBFFBFLLR
FFBFFFFRLL
FBFBBBFRRL
BBFFFBFLLL
FBFBFFFLLR
BFBBBFFLLR
BBBFBBFLLL
BBBFBFFRRR
BBFBFBFLRL
FBBFFBBRLR
BBFBFFFLRR
FBFBBFFLRR
BFFBBBFLRL
BFFBFBFRLR
FBFBFFFRRL
BFBBBBBRRR
BFBFBFBLRL
FFFBBFFLRL
BBBFBFBLRR
FFBFFFFLLL
FBBFBFBRRL
BBFBFFFLLL
FFFBFBFLLR
BFFFBFFRRR
FBBBFFFRRL
BFFBBBFRLL
FBBBFFBRLR
FBFBBFBLLL
BBBFFFFLRL
FBFFBFFRRL
BBFFFFFLLL
BBFFFFFLRL
FBFFBFBRRR
FFBFFFBLRL
FBFFFFFRLL
BFBFBFFRRR
BFFBBBBLLR
FFFBFBBRRL
FFBFBFFRRL
FBBBFFFLRR
BBFBFBFRRL
FFBFBFFRRR
BBFFFFBLLL
FBBFBFBRLR
FFBFFBFRRR
BBBFBBBLRL
BFBBFBFRRR
BBBFFFBLRR
FBBBBBFRLR
BFBFFBFRRR
BFBBFFBLRR
FFBFFBBRRR
FBBFFBFRLR
BFBBFFBRRL
BBBFBBBRLR
BBBFBBBLRR
BFBFFBFRLR
FBBBFBBRRR
BFBFFBBLRL
BBFFFBBRLL
FBBFFFFLLR
FFBFBBFLLR
BFFFFFBLLL
BFBFBFFLRR
BFFBBFBRRL
FBBBFFFRLL
FBFBFFBLRL
FFFBFFBRRL
BFFFFFFLLL
FFBBFFFRLL
FFBBBFBLRR
FFBBFFFRRL
FFFBBBFRRR
FFBFFBBRLL
BFFFFFFRLL
BBFFFBFLRL
FFBBFBBLLR
FBFBBBBLLL
FBBFFBFLLR
BFFBBFFRLR
BFFBFFBLLL
FFBBFBBLRR
BBFBBFFRRL
FBBFFBBLRR
FBBFBFFLLL
BBBFFFBRRL
BFBBFFFLRR
BBBFBBBLLL
FBBBFBFRRR
BFFBBBFRRR
BBBFFFBLRL
BFBFFFBLRL
BFFBFBBLRR
BBBFFBBRRR
BBFBBFFRLR
FFFBBBBLRL
BBFFBBBLRL
FFFBFBFLRL
FFBFBBBRRR
BFFFFFFLLR
FBFBBBBRLL
FBBBFFFRRR
BFBFFBBLLL
BFBFBFFLRL
BBFFFBFLLR
FBBFFFBRLR
FFFBBBFLRR
BFFFFBFRRR
BBFFBBFRRL
BFBFFBFLRL
FBBBFBFLLL
FBBFFBFLRL
BBFBBFBLRL
BBBFBBFLLR
BBFBFFBLRR
FBFBBBFRLR
BBBFBFFLLR
FBBFFBBLLL
BBFFFBBLRR
BFBFBBBLLR
BBFFBBBRLR
FFFBFBBLLL
FBFBBFBRLL
BBFBFFBRRL
BBFFFFBRLL
BFBFFBBLRR
BBFBBBFLRL
FBFFFFBRLR
FBFBFFBRRR
BFBBBBFRRR
BBFFBFFLRL
FBFFFFFRRL
FBFFFFBLLR
BFFBBFBLRR
BBBFFBFLLL
FBFFBFBLRR
FFBBFBFRLR
BBFBFBFRRR
BBFBFBFRLL
FBBBFBBLRL
BBBFFFFRRR
FBBBBBFLLL
BBFFBBBRRR
BFFFFBBRLR
FFBBFBBRLL
BBFBFBBLRL
BFFBFFBLRR
FBBFFFBRLL
FFFBBFBRLR
BBBFFBFLLR
BBFFFFBRLR
BFFBBFFRRR
FFBFFBFRLR
FBBFFFFRRL
BFBBBFFRRL
BFFBFBFLRR
FBBBFBBRLL
FBFFBBFRRL
BFFFBFFLRL
FFFBBFFRRR
BBFFFFBLLR
BFFBFBBRLL
BFFFBFBLLR
BBBFBBFLRR
FFBFBFFLRL
BFFBFFBRLL
FBBBFBBLLL
BFBBFBFLLL
FBFBBFFRLL
BFBFFFFLRR
FFBBFFBRRL
FBFBFBBLRR
FFFBFBBRLL
FBBFFBBRRR
FBFBBBBLLR
FBBFBFBLRR
BFFFFFBRLR
BFBBFBBRRR
BFBBBBBLLR
FFFBBFBLLR
FBBFFBBLRL
FFFBFBFRRL
BFFFFBFLLL
FBBBBBBRLR
FFBBBFFLLR
BFBBBBFRLL
FFBFBFFLRR
BFFBBFBLLR
FBFBFBBRLR
BBBFFFFLLR
FFBBBBFLLR
BFBBFFBRRR
BBFBBFFLLL
BFBBBBFRLR
FFFBBFFLRR
FFBFBBBRLL
BFBBFFBLRL
BFFBBBFRRL
FFFBFBFLRR
BFFFBBBRLL
BBBFBFBRLR
FBFFBBBRRL
FFBBBBFLRR
BFBBFBFRLL
BFBBBFFRRR
BBBFFBFRRL
BBFBFFFRLL
FFBFBFBRLL
FBBFBBFLRL
FFBBFFFRLR
FBBFFBBRRL
FBBBBFBLRR
BFFFBFFRRL
BFFFFBFRRL
BFBFBFBRLL
BFFBFBFRLL
FBFBBFBRRL
FFFBBFFRLL
BFFFFBFLRR
BFBBBBFLRR
BBFBFBBRRR
FBBBBBFRRR
BFBBBFFLLL
BFBBBFBRRR
FBFBBFFRRL
BBFBBBBLLR
BFBBFFBLLR
BFBBFBFLRR
FBFBBFFLLR
BFBFFFFLLR
BFFFBFBRRR
FBFBBFFLLL
FBFBFBFRLL
BBFBFFBLRL
BBBFFFFRRL
BFFFFBBLLR
FFFBBBBRLR
BFFFBFFLLL
BFFFBFFRLL
BFBFFBFRRL
FFBFBFBLRL
FFBFFFFRLR
BFFBBBFLLL
FBFFFBFRRL
BBFFBBBLLR
BFFBFFFRRR
BFBFFFBRLL
FFBFFBFLLL
BBFBBFBRRL
BBFBFBBRRL
BFBBFFBRLR
BBFFFBFRLR
BBBFFFBLLR
BFFBBFBRLR
BBFBFBBLLR
BBFFBBBRRL
FFFBBBFLRL
BFFBFFFRLL
FBFBFFFLRL
FBFBBBFLRL
BFBFFBFLLL
BFBFFFBLRR
BFBFFFFLRL
FBBBBFFLRL
BFFBFFBRRL
BFBBBBBLRL
BFBFBBBRLL
BBBFFBBLLL
FBBFBBBRRR
FFBBFFFLRR
FBBFFFFLRL
BBBFBFFLRR
BFBFBBFRLR
BBFBBFBRLR
FBFBFFBLLR
BFBFBBBRRL
BBFFBFBLLL
FBFFFFBLRL
FFBFBBFLLL
FBFFBFFLRR
BFFFFBFLLR
FFBFFFBRLL
FBFBBBBRRL
FFBFFFBLLL
BFBBFFBLLL
FFBBFFFLRL
FBFFFBFLRL
FBBBBBBLRL
BBBFFBBLRR
FBFBFBFRLR
BFBFBFFRLL
BFFFBBBLRL
BFFFBFBRRL
BBFFBBBLLL
FBFFFBBLRR
BFFBFBFRRL
BFFFBFBLLL
FBFBBFBRRR
BFBFBBFRRR
BBBFBFFRLL
FBBFFBFLRR
FFBBBFBLLL
BFBBBFFLRR
FFBBBFFRLR
BFFFBFFLRR
FFBBBFFRLL
FFBFBFBLLR
FBFFBFBLRL
FBFFFBBRRR
FFBFFFBLLR
FFBFFFBRLR
BFBFFBBLLR
BFBBBFBRLR
BFFBBBBLRL
BFBFFFBRRL
FBFFFBBLLL
BFFFFFFRRL
BBBFFBFLRL
FFFBBFBLRR
FBFFBBFRLL
BBFFBFBLRL
BBFBBFFLLR
FBBBFBFLRL
BBBFFBBLLR
FBBFFFBLRR
BFFFBBBRRL
BFBBFFFRLR
FFBFBBFLRL
BFFBBBBLLL
FBBBBBBRRL
FBFFBFFRLR
FBFFBFFLRL
BFFBBFBLRL
FBFFBBFLLR
BBFFFFBLRR
FBBFFBFRRR
BFFBFFBRLR
FBBBBBFLRR
BFBFFBFRLL
FBFFBFBLLR
FBFBBFBRLR
BBBFFFFRLR
FFFBFFBRRR
BBFFFBFRRL
BFBFBBFLRL
FBBFBBFRLL
FFFBBBBLRR
BFBBFBBLLR
BFBFFFBLLR
FBBFBBBRRL
BFBFFFFLLL
FBFFFBFLLL
BBFFFBFRRR
FBFFBBBRLL
FBFFBFBRLL
FFBBFBFLRR
FFFBBBFRRL
FBBFBFFLRR
FBFFBBBLRL
BFBBFFFRRR
FBBFBFBRLL
FBFFBBBLRR
FFBBBFBLLR
BFBFBFFRLR
BFFBFBBLLR
FBFFBFBLLL
FBBBFBFLLR
BFFFFBBLLL
FFBBBBFLRL
BFBBFBFLLR
BFFBFFBRRR
FBFBBFFRLR
FBFBBBFLRR
FBBFFFBRRL
BBFFBFBRLR
BFBFFBBRRR
BBFFBFFLLR
BBBFFFFLLL
FFBFBFFRLL
BFFBFBFRRR
FBBBBFBLLL
FBFBFBFLRR
FBFBBFBLLR
BFFFBBBLLL
FBBFFFBRRR
FBBBBFFRRR
FFFBBFFRRL
FFBBBFFRRR
FBBFBBFLLL
BBBFBFFRRL
BBFFBFBRLL
FBFFFFBLRR
FFBFFBFLRR
FBBBFBFLRR
BFBBBBFLRL
FFBBFBFLLR
FFBBFFBRLR
BFBFBBBRLR
BFBFFBFLRR
FBBFBFBLRL
FFFBBFBRRR
BFFFFFFLRR
BBFBFFBRLR
FBBBFFFRLR
FBBFBFFRLL
FBFBBBFRRR
FBFFBBFRRR
BBFBBFBLLR
FBFFFBBRRL
BFBFBBFLLL
FBFFFBFRRR
FBFBFBBRLL
FFBBFFBRLL
FBBBFBBRLR
FBBBFBBLLR
BFBBFBFRRL
FBFFBBFRLR
FBBFBFFRRL
BFBFBBBLLL
BFBBBFBLRL
BFFFFBBLRR
BFBBBFFLRL
FBFFFBBRLR
FFBFFFFRRR
FBBFBFFLRL
BFBFFFFRRL
BFBBFFFRRL
BFBFBFBLLR
BBFFFBFRLL
BFBBBBFLLL
BFFBBBBRLR
FBBBBBBRRR
BFFFFBBRLL
BBBFBBBRRL
BFFBFFFRRL
FBFBBBBLRL
BBFBBFBLLL
FBFFFBFRLR
FBFFFBFLRR
BBBFBBFRLR
FFBBBBFRRR
FBFBFBFLLR
FBBBFFFLRL
FFBFBFBLLL
BFFBFBFLRL
BFFBFBBRRR
FBBFFFFLLL
BBFBBBBLRL
FFFBFBFRLL
FFBBBFBRLR
BFBBBFBLLR
BFBBBBBRLL
FBFFBBFLRR
BFBBBBBLLL
FBBFBFFRRR
FBBBBBBLRR
BFBBFBFRLR
BBFFFFFLLR
BBFBBFBLRR
BFFFFFBRLL
FFBBFBBLRL
FBFBFBBLLR
BBFBFBBRLL
BFFFFBFRLL
FFFBBFFLLR
BBBFBFFRLR
BFBBBFFRLL
FBBFBBFLRR
BFBFBFBLLL
BFFBBBBRRL
BBFBBBFRRL
FFBBBBBLRR
FFBBBFBRLL
BFBBFBBRLL
FBBBFBBLRR
FFFBFBBLRR
BBFBFFFRRR
BFBFBFFLLR
BFFFBFBRLL
BBFFBFFRLL
FFBFFBFLRL
FBBBBFFRLL
FFBFBFBRRR
BBFBBBBLLL
BBFFBFBLRR
FFBBFFBRRR
FBBFFFFRRR
FFBFFBBLLR
FBFBFBBRRR
FFFBFBFLLL
FFBBFBFRRL
BFFFBBFRRL
FBFBFFBRRL
FFBBFFFLLR
BFFBBBBLRR
BFFFFFBRRL
BBFBBBBRLL
BFFFBBBLLR
BFBFFFFRRR
BBFBFFBLLR
FBFFFFFLRR
FBBBBBFRLL
BFFBFBBLLL
BBBFBBFLRL
BBFFFBBRRL
FBFBBBFLLR
FFBBBBBRRL
BFFFFFBLRR
FFBFBBFRLL
FBBFFFBLLL
FFBBFBFRRR
FBFFBBFLLL
FBBFBBFRLR
BFFFFBBRRR
BFFFBBFLRR
FBFFFFBRRL
BFBFBBBLRR
BBBFFBBRLL
BBFFBBFLLL
BFBFBBFRRL
FBBFBFBLLL
FFBFFBBRRL
FBFBBFFRRR
BFBBBFBRRL
FFBFFBBLRL
FFBBBBBLRL
FFFBBFBLRL
FBBBBFBRLL
FBBBFFBLLL
BBFFFBBLLL
BFFFFFFRRR
BFBBBBBRRL
FBFBFBFRRL
FBBBFFBRLL
BBBFBFBLRL
FBBBBFFRRL
FBFFBFFRRR
FBFFBFFRLL
FBFBFFFLLL
BBFBBFBRRR
FFBBFFBLLR
BBBFBBFRRR
BBBFFBFRLR
FFBFFFFRRL
BFFFBFBLRR
FBBBFFBRRR
FFFBBBFLLL
FBFFFBBRLL
BBFBBFFLRL
FFBFBBBLRR
FFBBBFFLRR
FFBBBBFRLL
FFFBFBBLRL
BBBFFBBRLR
BBBFFFFRLL
FBBFFBFLLL
BFBBBBFLLR
FBFBFBFLLL
FBFFFBFLLR
BFBBFFFLRL
FFBFBFFRLR
BFFBFBBRRL
FBFFFFFLLL
BFFFFBBLRL
BFBBBFBLLL
BBFFBFBRRL
BBFBBBFRRR
FBBBFFFLLR
FFFBBBFRLL
BFBBBBBLRR
BBFFFBBLRL
BBFBFBBLRR
BBFBFBBRLR
FBBBBFFRLR
BBBFBFBRRR
BBBFFFBRRR
FBBFBBBRLL
FBFBFFFLRR
FFBBBFFLRL
FBBBBFBRLR
BFFBFBFLLL
BFBFBFFRRL
BFBFFFFRLL
BBBFFBBRRL
FBBBFBFRLL
BFBBFBBLRR
BBBFBBBRLL
BBBFFBFLRR
FBBFFFBLLR
BFBFBBBRRR
BBBFBBBRRR
FBFFBBBLLR
FBFBFFBRLR
FFBFFFBRRR
FBFFFBBLLR
BFFBFFFLLL
FBFBFFBLLL
FBFBBBFLLL
FFBFBFFLLL
FFBFBBFRLR
FFBFFFFLRR
FFBBFBBRRR
FFBFBBBRRL
BFBBBFBRLL
BBBFFFBRLL
FBFFBFFLLL
BBFFBFFRRR
FFFBBFBRLL
BFFBFFFLRR
FBBBBBFRRL
FFBFBBFRRL
BBFFFFFRRR
BFFFFFBLLR
FBFBFFBRLL
BFBFFFBRLR
FFBBFBFRLL
BBFBBBFRLR
FBFBBFBLRL
FFBFFFBLRR
FBFBFFFRLR
BFFBBFFRLL
FBBFBFBRRR
FFBBBBBRRR
FBBFFBBLLR
FFFBBBBRRL
FFFBBBBRLL
BBFFFFFRLL
BBFBBBBRRR
BFFBBFBRRR
BFBBFBBLRL
BBFBBBBRLR
FBBBFFBLLR
FBBFBBBLRR
FFBBBFFRRL
BBFBBBBLRR
FBBFBBFRRR
FFBBFBFLRL
FBBFBBBLRL
FBFFFFBRRR
FFBBFFFLLL
BBBFFFFLRR
FBFBBFFLRL
FFFBBFFRLR
FBBBBFFLLR
BFBFBFBLRR
FBBBBFFLRR
BBFBFFFLLR
FFBBFBBRLR
BFFBBFFLRR
FFBFFBFRLL
BBFBBFFLRR
BBFBFBFLLR
BBFBFFBRLL
FFBFBFBRRL
BFBBFFBRLL
FFFBBBFLLR
FBFFBBBLLL
FFFBBBFRLR
FFBBFFBLLL
FFBBBBFRLR
BBFFFFBLRL
FBBBBFBRRR
BFFFBBFLLL
BBBFBBBLLR
BBFBFFFRLR
FBFFFBFRLL
BBFBBBFLRR
BBFBFFFLRL
FFBFFFFLLR
FBBFBBBLLR
BBFFBBFRRR
BBBFBFBLLL
FBBFBFFRLR
FBFFBBFLRL
FFFBBBBLLL
BFBFFFBLLL
FBBFBFBLLR
BBFBFFBLLL
FFFBBFBLLL
BFFBFBFLLR
FFBFBFBRLR
BFFBFBBRLR
FFBFBFBLRR
FBFFFBBLRL
BBFFBFBLLR
BFBFFFBRRR
BFFFFBFRLR
FBFBFBBLRL
BFFFBFFRLR
BBFFBBFRLL
BFBBBBBRLR
BFBFBFBRRR
BBFFBBFLRR
FFBBBBBLLR
FBFFFFFLLR
FBFBFBFLRL
FBFFBBBRLR
BBBFBFBLLR
BFFBFFBLLR
FBBBBFFLLL
BFBBFFFLLR
FFFBFBFRRR
FFBFFFBRRL
FBBBBBBLLR
FBBFFFBLRL
BBBFFBFRLL
FBFFBFBRRL
BBFFFFFRRL";

    #[test]
    fn example() {
        assert_eq!(567, parse_binary_space_partiioning(&EXAMPLE_DATA[0]));
        assert_eq!(119, parse_binary_space_partiioning(&EXAMPLE_DATA[1]));
        assert_eq!(820, parse_binary_space_partiioning(&EXAMPLE_DATA[2]));
    }

    #[test]
    fn my_part_one() {
        let mut max_value = 0;
        for entry in MY_DATA.split("\n") {
            max_value = max(max_value, parse_binary_space_partiioning(entry));
        }
        println!("part one: {}", max_value);
    }

    #[test]
    fn my_part_two() {
        let mut entries: Vec<i32> = vec![];
        for entry in MY_DATA.split("\n") {
            entries.push(parse_binary_space_partiioning(entry));
        }
        entries.sort();
        let mut previous = entries[0] - 1;
        for entry in entries {
            if entry - previous == 2 {
                println!("{} - {}", previous, entry);
                break;
            }
            previous = entry;
        }
    }
}